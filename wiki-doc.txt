= IOC Message Logging =

== Contents ==
* [#architecture Logging Architecture Overview]
* [#logserver Log Server]
  * [#functionality Functionality]
  * [#development Development]
  * [#building Building and Running]
* [#jmsserver JMS Server]
* [#devtools Development Tools]
* [#database Database Server]
* [#eclipse Eclipse Clients]
* [#xml Format for JMS Dispatched Messages]
* [#connection Connection Details]

[=#architecture]
== Logging Architecture Overview ==

Each IOC has some functionality to dispatch any log messages it generates to a listening IOC log server, the address and port of which must be known to the IOC. 

Assuming that the log server is active, the IOC will automatically connect to the log server on start-up and send any messages on to it as soon as they arise.

EPICS base includes a simple IOC log server that writes log messages to a text file. We have replaced this with our own server written in Java that has much more functionality.

Our Java log server may connect to any number of IOCs. It processes incoming messages, formats them appropriately, and then dispatches them using a messaging service called [http://en.wikipedia.org/wiki/Java_Message_Service JMS (Java message service)]. 

A JMS server receives these reformatted messages and forwards them on to any subscribers (e.g. Eclipse clients). 

The log server also saves all messages to a relational database (SQL). Messages may then be retrieved at any time from the database by interested clients (again, Eclipse clients).

It is likely that the Log server, JMS server, and Database server will all live on the same physical machine.

[[Image(iocLogArchitecture.pngâ€‹)]]


[=#logserver]
== Log Server ==

The log server is written in Java and may be found in the directory 'EPICS/ISIS/IocLogServer/'.

Also included in this directory are an instance of Apache ActiveMQ (a JMS server implementation), some tools written in python to aid development, and some start-up and build scripts.

[=#functionality]
=== Functionality ===

Once the log server is started, it will automatically attempt to connect to the JMS server and the SQL database server (the connection details for each are currently hardcoded but will be moved to external config files in the future). 

If the log server cannot connect to either, or if the connection to either is dropped at any point while the log server is running, it will automatically attempt to re-establish connection (and keep trying every few seconds until it is re-established).

The log server will then attempt to listen for IOC messages on a set of ports (again hardcoded, to be moved to config file in the future). Any messages received are (i) converted into and XML format and forwarded on to the JMS server; (ii) saved to the SQL database.

The connection to both the JMS server and the database are independently buffered so that if connection to either is lost, the log server will wait to re-establish connection before sending on any messages, so that no messages should be dropped. The log server will wait a few seconds after re-establishing connection to the JMS before sending any messages, in order to give JMS clients a chance to reconnect to the JMS server themselves.

[=#development]
=== Development ===
To develop the log server, create a new directory '/!IocLogServer' called workspace. Open [https://www.eclipse.org/ Eclipse] and select this new folder as the workspace.

Import the log server project (File > Import > General > Existing Projects into Workspace > folder EPICS/ISIS/IocLogServer/base.

To run the server in Eclipse, expand the project folder, select the file '!LaunchServer.launch' and click run.

[=#building]
=== Building and Running ===
The log server can be built using [http://ant.apache.org/ Apache Ant]. An Ant 'build.xml' file is included in the project. To build, install ant on your computer and run the batch file 'build-log-server.bat' found in the directory EPICS/ISIS/IocLogServer/. This will create a runnable jar file.

The server can be launched by running 'start-log-server.bat' (this will also automatically build the server if you have not done so already).

To test the functionality, you should also launch the JMS server by running 'start-jms-server.bat'. You can test that message passing works correctly by using the demonstration IOC and demonstration JMS client detailed in the [#devtools Development Tools] section below.

See the [#database Database Server] section below for details on how to set up a test SQL database.

Instructions to build the log server are included as part of the [http://jenkins.isis.rl.ac.uk/EPICS/ Jenkins] build script (EPICS/jenkins_build.bat)

The log server and JMS server should be started automatically when running the script /EPICS/start_inst.bat. The startup details are in the script EPICS/logserver/start_log_servers.bat.




[=#jmsserver]
== JMS Server ==
The JMS server implementation used is [http://activemq.apache.org/ Apache ActiveMQ]. ActiveMQ comes bundled with the log server and a start-up script for it is included ('start-jms-server.bat').

Message producers (the log server) and consumers (Eclipse-based clients) interact through the JMS by subscribing to a 'topic'. Any message that a producer sends to the topic is immediately forwarded to all consumers who are currently subscribed to the topic.

JMS does not buffer topic messages so any consumer who is not connected to the JMS server and subscribed to the topic when the server receives the message will not have the message forwarded to them.

The Topic for IOC log messages is '/topic/iocLogs'.

The default port for sending and receiving JMS messages on ActiveMQ is 61616.




[=#devtools]
== Development Tools ==
In the subdirectory 'dev-tools' are a number of python scripts to aid in development and debugging of the log server and eclipse clients that consume log messages.

The first, 'jms_client.py', connects to the JMS server and receives any messages forwarded by it. This can be used to test if the log server is correctly forwarding on messages.

The connection details used (JMS server address, port, topic name) are found in 'jms_details.py'.

The second tool is 'ioc_message_simulator.py' which connects directly to the log server and can be used to simulate messages coming from IOCs.

These tools may be started using the batch files: 'start-jms-demo-client.bat' and 'start-ioc-demo.bat' respectively.

Another tool that may be of use in analysing problems relating to the connection between two programs is [http://technet.microsoft.com/en-gb/sysinternals/bb897437.aspx TCPView]. This displays a list of active TCP connections including port numbers to and from processes on your machine.

[=#database]
== Database Server ==
You can use [http://www.mysql.com/products/workbench/ MySQL workbench] as a MySQL development server.

The file EPICS/ISIS/IocLogServer/log_mysql_schema.txt contains a sequence of SQL commands that will create the appropriate schema for use by the log server and clients.

[=#eclipse]
== Eclipse Clients ==

[=#xml]
== Format for JMS Dispatched Messages ==

The log server converts log messages into a simple XML format before dispatching them via JMS. 

The message should always include opening and closing 'message' tags and may include one each of:
* contents
* severity
* eventTime
* clientName
* type

Any of these may be omitted.

A typical message might look like:

{{{
<message>
    <contents>Unable to access PV: 'PREFIX:IOC_NAME:PV_NAME'</contents>
    <severity>ERROR</severity>
    <eventTime>2014-07-16 15:45:27</eventTime>
    <clientName>GALIL_06</clientName>
    <type>ioclog</type>
</message>
}}}

[=#connection]
== Connection Details ==
* Default IOC log port: 7004
* IOC caput log port: 7011
* Log server address: localhost
* JMS server address: localhost
* JMS server port: 61616
* SQL server address: localhost

